package pool

import (
	"database/sql"
	"fmt"
   _"github.com/mattn/go-sqlite3"
	"logger"
)
var db_path string
var con_size int
var connection_channel = make([]*sql.DB, 10)

func Init(path string) {
	db_path = path
	Insert_conn(10)
}


func Insert_conn(num int) int {
	fmt.Println(con_size)	
	for i:=0 ; i< num ; i++{
		connection_channel[i] = make_connection(i)
	}
	fmt.Println("database pool array = ", connection_channel)
	return 1
}

func make_connection(i int) *sql.DB {
	logger.Init("myLog.txt")

	db, err := sql.Open("sqlite3", db_path)
	if (err != nil) {
		fmt.Println("connection Failed")
		logger.Fatal(err.Error())
		db.Close()
	}
	fmt.Println("connection made",i)
	return db
}


// func Close() {
// 	err := con.Close()
// 	if(err != nil){
// 		fmt.Println("error closing"+err.Error())
// 	}else{
// 		fmt.Println("connection closed")
// 	}
// }


//type Connection_pool struct{}
// func(conn *Connection_pool) Create_Channel() chan *sql.DB{
// 	connection_p := make(chan *sql.DB)
// 	return connection_p
// }
// func Insert_conn(num int) int {
// 	var con_canel Connection_pool
// 	my_Chanel := con_canel.Create_Channel(num)
// 	for i:=0 ; i< num ; i++{
// 		my_Chanel <- get_connection(i)
// 		fmt.Println(i)
// 	}
// 	return 1
// }
